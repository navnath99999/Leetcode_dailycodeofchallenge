/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public TreeNode sortedListToBST(ListNode head) 
    {
        int n=0 ;
        List<Integer> arr = new ArrayList<>() ;
        
        while(head!=null)
        {
            arr.add(head.val) ;
            head=head.next ;
            n++ ;
        }
        TreeNode node = sortedArrayToBST(arr, 0, n-1) ;
        
        return node ;    
    }
    
    TreeNode sortedArrayToBST(List<Integer> arr, int start, int end)
    {
        if(start>end)
        {
            return null ;
        }
        
        int mid = (start+end) / 2 ;
        TreeNode node = new TreeNode(arr.get(mid)) ;
        
       node.left = sortedArrayToBST(arr, start, mid-1) ; 
        
        node.right = sortedArrayToBST(arr, mid+1, end) ;
        
        return node ;
           
    } 
}
