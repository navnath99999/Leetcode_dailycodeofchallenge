class Solution 
{
    
    int[][] dirc = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    public int maxDistance(int[][] grid) 
    {
        
        int[][] visit = new int[grid.length][grid[0].length];

       
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        for (int i = 0; i < grid.length; i++) 
        {
            for (int j = 0; j < grid[0].length; j++) 
            {
                visit[i][j] = grid[i][j];
                if (grid[i][j] == 1) {
                    q.offer(new Pair(i, j));
                }
            }
        }

        int dist = -1;
        while (!q.isEmpty()) 
        {
            int qSize = q.size();

            
            while (qSize-- > 0) 
            {
                Pair<Integer, Integer> landCell = q.poll();

               
                for (int[] dir : dirc) 
                {
                    int x = landCell.getKey() + dir[0];
                    int y = landCell.getValue() + dir[1];

                    if (x >= 0 && y >= 0 && x < grid.length && y 
                    < grid[0].length && visit[x][y] == 0) 
                    {
                        visit[x][y] = 1;
                        q.offer(new Pair(x, y));
                    }
                }
            }

            dist++;
        }
        return dist == 0 ? -1 : dist;
    }
}
